{
  "_args": [
    [
      {
        "raw": "react-avatar@^2.3.0",
        "scope": null,
        "escapedName": "react-avatar",
        "name": "react-avatar",
        "rawSpec": "^2.3.0",
        "spec": ">=2.3.0 <3.0.0",
        "type": "range"
      },
      "/Users/sidhantsharma/Desktop/GIT/NewWebsite"
    ]
  ],
  "_from": "react-avatar@>=2.3.0 <3.0.0",
  "_id": "react-avatar@2.5.1",
  "_inCache": true,
  "_location": "/react-avatar",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-avatar-2.5.1.tgz_1511777980593_0.7973812893033028"
  },
  "_npmUser": {
    "name": "sitebase",
    "email": "wim@sitebase.be"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-avatar@^2.3.0",
    "scope": null,
    "escapedName": "react-avatar",
    "name": "react-avatar",
    "rawSpec": "^2.3.0",
    "spec": ">=2.3.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-avatar/-/react-avatar-2.5.1.tgz",
  "_shasum": "5bbe8c1d0a52593d4608fb3d8629da995eeb7095",
  "_shrinkwrap": null,
  "_spec": "react-avatar@^2.3.0",
  "_where": "/Users/sidhantsharma/Desktop/GIT/NewWebsite",
  "author": {
    "name": "Wim Mostmans",
    "email": "wim@sitebase.be"
  },
  "browserify-global-shim": {},
  "bugs": {
    "url": "https://github.com/sitebase/react-avatar/issues"
  },
  "dependencies": {
    "babel-runtime": ">=5.0.0",
    "is-retina": "^1.0.3",
    "md5": "^2.0.0"
  },
  "description": "Universal React avatar component makes it possible to generate avatars based on user information.",
  "devDependencies": {
    "babel": "6.5.0",
    "babel-cli": "^6.24.1",
    "babel-core": "6.5.0",
    "babel-eslint": "^6.0.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-dev": "^1.0.0",
    "babel-plugin-dev-expression": "^0.1.0",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-plugin-transform-inline-environment-variables": "^6.5.0",
    "babel-plugin-transform-member-expression-literals": "^6.5.0",
    "babel-plugin-transform-property-literals": "^6.5.0",
    "babel-plugin-transform-react-constant-elements": "^6.5.0",
    "babel-plugin-transform-react-inline-elements": "^6.5.0",
    "babel-plugin-transform-runtime": "^6.5.2",
    "babel-plugin-transform-undefined-to-void": "^6.5.0",
    "babel-preset-es2015": "^6.5.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-regenerator-runtime": "^6.5.0",
    "babel-register": "^6.5.2",
    "babelify": "^7.2.0",
    "browserify": "^13.0.1",
    "browserify-global-shim": "^1.0.3",
    "eslint": "1.10.3",
    "eslint-plugin-react": "3.5.1",
    "react": "^15.0.0",
    "react-dom": "^15.0.0",
    "reactify": "^1.0.0",
    "watchify": "^3.7.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-bwH5pWY6uxaKZt+IZBfD+SU3Dpy3FaKbmAzrOI4N8SATUPLXOdGaJHWUl6Vl8hHSwWSsoLh/m7xYHdnn0lofZw==",
    "shasum": "5bbe8c1d0a52593d4608fb3d8629da995eeb7095",
    "tarball": "https://registry.npmjs.org/react-avatar/-/react-avatar-2.5.1.tgz"
  },
  "engines": {
    "node": "8.x.x"
  },
  "gitHead": "dbff024c51cce55c89b7cf2c033bfd2b1b2c60bc",
  "homepage": "https://github.com/sitebase/react-avatar",
  "keywords": [
    "component",
    "reactjs",
    "react-component",
    "avatar"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jorgenevens",
      "email": "jorgen@evens.eu"
    },
    {
      "name": "sitebase",
      "email": "wim@sitebase.be"
    }
  ],
  "name": "react-avatar",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0.0 || ^16.0.0",
    "prop-types": "^15.0.0 || ^16.0.0"
  },
  "readme": "# &lt;Avatar&gt;[![Build Status](https://travis-ci.org/Sitebase/react-avatar.svg?branch=master)](https://travis-ci.org/Sitebase/react-avatar)\nUniversal avatar makes it possible to fetch/generate an avatar based on the information you have about that user.\nWe use a fallback system that if for example an invalid Facebook ID is used it will try Google, and so on.\n\n![React Avatar component preview](example1.jpg)\n\nFor the moment we support following types:\n* Facebook\n* Google\n* Twitter\n* Vkontakte\n* Skype\n* Gravatar\n* Custom image\n* Name initials\n\nThe fallbacks are in the same order as the list above were Facebook has the highest priority.\n\n## Demo\n\n[Check it live!](https://www.sitebase.be/react-avatar/?utm_source=github&utm_medium=readme&utm_campaign=react-avatar)\n\n## Install\n\nInstall the component using [NPM](https://www.npmjs.com/):\n\n```sh\n$ npm install react-avatar --save\n\n# besides React, react-avatar also has react-addons-shallow-compare and prop-types\n# as peer dependencies, make sure to install the correct version\n# for your version of react\n$ npm install react-addons-shallow-compare@^0.14 --save\n# OR\n$ npm install react-addons-shallow-compare@^15 --save\n```\n\nOr [download as ZIP](https://github.com/sitebase/react-avatar/archive/master.zip).\n\n\n## Usage\n\n1. Import Custom Element:\n\n    ```js\n    import Avatar from 'react-avatar';\n    ```\n\n2. Start using it!\n\n    ```html\n    <Avatar name=\"Foo Bar\" />\n    ```\n\nSome examples:\n\n```html\n<Avatar googleId=\"118096717852922241760\" size=\"100\" round={true} />\n<Avatar facebookId=\"100008343750912\" size=\"150\" />\n<Avatar vkontakteId=\"1\" size=\"150\" />\n<Avatar skypeId=\"sitebase\" size=\"200\" />\n<Avatar twitterHandle=\"sitebase\" size=\"40\" />\n<Avatar name=\"Wim Mostmans\" size=\"150\" />\n<Avatar name=\"Wim Mostmans\" size=\"150\" textSizeRatio=\"1.75\" />\n<Avatar value=\"86%\" size=\"40\" />\n<Avatar size=\"100\" facebook-id=\"invalidfacebookusername\" src=\"http://www.gravatar.com/avatar/a16a38cdfe8b2cbd38e8a56ab93238d3\" />\n<Avatar name=\"Wim Mostmans\" unstyled=\"true\" />\n```\n\n## Options\n\n|   Attribute   |      Options      | Default |                                              Description                                               |\n| ------------- | ----------------- | ------- | ------------------------------------------------------------------------------------------------------ |\n| `className`       | *string*          | sb-avatar        | Name of the CSS class you want to add to this component.                             |\n| `email`       | *string*          |         | String of the email address of the user. You can also provide an MD5 hash.                             |\n| `facebook-id` | *string* |         |                                                                                                        |\n| `twitter-handle` | *string* |         |                                                                                                        |\n| `google-id`   | *string*             |         |                                                                                                        |\n| `skype-id`    | *string*          |         |                                                                                                        |\n| `name`        | *string*          |         | Will be used to generate avatar based on the initials of the person                                    |\n| `maxInitials` | *number*          |         | Set max nr of characters used for the initials. If maxInitials=2 and the name is Foo Bar Var the initials will be FB  |\n| `value`       | *string*          |         | Show a value as avatar                                                                                 |\n| `color`       | *string*          | random  | Used in combination with `name` and `value`. Give the background a fixed color with a hex like for example #FF0000 |\n| `fgColor`     | *string*          | #FFF  | Used in combination with `name` and `value`. Give the text a fixed color with a hex like for example #FF0000 |\n| `size`        | *number*             | 50      | Size of the avatar                                                                                     |\n| `textSizeRatio` | *number*             | 3      | For text based avatars the size of the text as a fragment of size (size / textSizeRatio)                                 |\n| `round`       | *bool*            | false   | Round the avatar corners                                                                               |\n| `src`         | *string*          |         | Fallback image to use                                                                                  |\n| `style`         | *object*          |         | Style that will be applied on the root element                                                       |\n| `unstyled`    | *bool*            | false   | Disable all styles                                                                                     |\n| `onClick`    | *function*            |        | Mouse click event                                                                                     |\n\n## Development\n\nIn order to run it locally you'll need to fetch some dependencies and a basic server setup.\n\n* Install local dependencies:\n\n    ```sh\n    $ npm install\n    ```\n\n* Auto build new test version when developing that can be run with `grunt connect`:\n\n    ```sh\n    $ npm run dev\n    ```\n\n* To test your project, start the development server and open `http://localhost:8000/index.html`.\n\n    ```sh\n    $ python -m SimpleHTTPServer\n    ```\n\n## Products using React Avatar\n* [BuboBox](https://www.bubobox.com/?utm_source=github&utm_medium=readme&utm_campaign=react-avatar)\n* [Ambassify](https://www.ambassify.com/?utm_source=github&utm_medium=readme&utm_campaign=react-avatar)\n\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -m 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## History\n\nFor detailed changelog, check [Releases](https://github.com/sitebase/react-avatar/releases).\n\n## License\n\n[MIT License](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sitebase/react-avatar.git"
  },
  "scripts": {
    "clean": "rm -rf ./lib/*",
    "demo": "browserify ./lib/demo.js -o ./build/demo.js --transform browserify-global-shim --standalone ReactAvatarDemo",
    "dev": "npm run clean && npm run transpile && npm run demo",
    "serve": "python -m SimpleHTTPServer",
    "test": "eslint src/index.js",
    "transpile": "babel ./src --out-dir ./lib"
  },
  "version": "2.5.1"
}
